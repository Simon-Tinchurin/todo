Задание 1.

Поставлена задача, сделать сервис кастомных нотификации через телеграм. Который будет
- гарантировать доставку exactly once.
Ваша задача, подготовить развернутую архитектуру сервиса, с выбором технологий и
инструментов, а также взаимодействия между элементами системы. Описать механизм ее работы,
сильные и слабые стороны.

Компоненты системы:
1. Телеграм-бот с Telegram Bot API на Python (библиотека python-telegram-bot)
2. Producer (Система мониторинга/Веб-сервис на Flask или FastAPI/Пользовательский интерфейс)
3. Очередь сообщений (RabbitMQ)
4. Consumer (Микросервис на Flask или FastAPI)
5. Хранилище состояния (база данных PostgreSQL)
6. Оркестрация/масштабирование (Docker/Kubernetes)
7. Логирование/мониторинг (Prometheus)

Взаимодействие между элементами системы:

1. Producer - инициирует создание уведомлений и отправляет их в очередь RabbitMQ.
    1.1 Получает событие или запрос на отправку уведомления
    1.2 Формирует сообщение (текст уведомления, id получателя, message_id)
    1.3 Отправляет сообщение в очередь

2. Очередь сообщений - принимает сообщение от продюсера и обеспечивает доставку консьюмеру.
    2.1 Получает сообщение от продюсера и помещает его в соответствующую очередь
    2.2 Хранит сообщение до тех пор, пока консьюмер не обработает его
    2.3 Передает сообщение консьюмеру, когда тот готов его обработать

3. Consumer - читает сообщения из очереди, проверяет их статус доставки и отправляет уведомления через Telegram.
    3.1 Подключается к очереди и получает сообщение
    3.2 Проверяет БД на наличие записи с идентификатором message_id этого сообщения
    3.3 Если сообщение уже было отправлено (запись существует и статус "delivered"), оно игнорируется
    3.4 Если сообщения еще нет в БД, консьюмер продолжает обработку
    3.5 Отправляет запрос к Telegram Bot API для доставки уведомления пользователю
    3.6 Telegram API возвращает результат запроса: успешно доставлено или произошла ошибка
    3.7 Если уведомление было успешно отправлено, консьюмер обновляет БД, добавляя запись о том, что сообщение с данным message_id было доставлено (статус "delivered")
    3.8 Если отправка не удалась, консьюмер увеличивает счетчик попыток отправки и может заново попробовать отправить сообщение позже

4. PostgreSQL - используется для хранения информации о статусе каждого сообщения. 
Это необходимо для гарантии того, что каждое сообщение будет отправлено ровно один раз. (п.3.2-3.4, п.3.7-3.8)

Пример схемы таблицы в БД:
CREATE TABLE message_status (
    message_id UUID PRIMARY KEY,
    status VARCHAR(255),  -- например, 'pending', 'delivered', 'failed'
    delivery_attempts INT DEFAULT 0,
    last_attempt TIMESTAMP
);

5. Telegram Bot API - для непосредственной отправки уведомлений пользователям через Telegram. (п.3.5-3.6)
    

Сильные стороны:

1. Гарантия доставки exactly-once
2. Масштабируемость
3. Надежность, благодаря повторной отправке и отслеживанию состояния

Слабые стороны:
1. Сложность реализации
2. Задержки в обработке сообщений из-за проверки статуса доставки
3. Зависимость от сторонних сервисов, таких как БД, являются точками отказа, требующими дополнительной защиты - бекапов/репликации.



